package com.exscudo.peer.store.sqlite.utils;

import java.io.EOFException;
import java.math.BigInteger;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import com.exscudo.peer.core.data.Block;
import com.exscudo.peer.core.data.Transaction;
import com.exscudo.peer.core.exceptions.DataAccessException;
import com.exscudo.peer.core.utils.Format;
import com.exscudo.peer.store.sqlite.ConnectionProxy;

/**
 * Manage block in DB
 */
@SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
public class BlockHelper {

	/**
	 * Read block from DB
	 *
	 * @param db data connection
	 * @param id block id to read
	 * @return block from DB
	 * @throws DataAccessException problems with the DB
	 */
	public static Block get(ConnectionProxy db, final long id) throws DataAccessException {

		try {

			PreparedStatement getStatement = db.prepareStatement(
					"select \"version\", \"timestamp\", \"previousBlock\", \"generator\", \"generationSignature\", \"blockSignature\", \"height\", \"nextBlock\", \"cumulativeDifficulty\", \"snapshot\" from \"block\" where \"id\" = ?");

			ResultSet set;

			synchronized (getStatement) {
				getStatement.setLong(1, id);
				set = getStatement.executeQuery();

				if (set.next()) {
					Block block = getBlockFromRow(db, set);
					set.close();
					return block;
				}
			}

			set.close();
			return null;

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	/**
	 * Save block to DB
	 *
	 * @param db    data connection
	 * @param block Block to save
	 * @throws DataAccessException problems with the DB
	 */
	public static void save(ConnectionProxy db, final Block block) throws DataAccessException {

		try {

			PreparedStatement saveStatement = db.prepareStatement(
					"INSERT OR REPLACE INTO \"block\" (\"id\", \"version\", \"timestamp\", \"previousBlock\", \"generator\", \"generationSignature\", \"blockSignature\", \"height\", \"nextBlock\", \"cumulativeDifficulty\", \"snapshot\")\n VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
			synchronized (saveStatement) {

				saveStatement.setLong(1, block.getID());
				saveStatement.setInt(2, block.getVersion());
				saveStatement.setInt(3, block.getTimestamp());
				saveStatement.setLong(4, block.getPreviousBlock());
				saveStatement.setLong(5, block.getSenderID());
				saveStatement.setString(6, Format.convert(block.getGenerationSignature()));
				saveStatement.setString(7, Format.convert(block.getSignature()));
				saveStatement.setInt(8, block.getHeight());
				saveStatement.setLong(9, block.getNextBlock());
				saveStatement.setString(10, block.getCumulativeDifficulty().toString());
				saveStatement.setString(11, Format.convert(block.getSnapshot()));
				saveStatement.executeUpdate();

			}

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	/**
	 * Remove block from DB
	 *
	 * @param db data connection
	 * @param id block id to remove
	 * @throws DataAccessException problems with the DB
	 */
	public static void remove(ConnectionProxy db, final long id) throws DataAccessException {

		try {

			PreparedStatement removeStatement = db.prepareStatement("delete from \"block\" where \"id\" = ?");
			synchronized (removeStatement) {

				removeStatement.setLong(1, id);
				removeStatement.executeUpdate();

			}

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	/**
	 * Read block history from DB
	 *
	 * @param db    data connection
	 * @param begin begin block height
	 * @param end   end block height
	 * @return sorted by height list of block id
	 * @throws DataAccessException problems with the DB
	 */
	public static long[] getBlockLinkedList(ConnectionProxy db, int begin, int end) throws DataAccessException {

		try {

			PreparedStatement getListStatement = db.prepareStatement(
					"SELECT \"id\", \"nextBlock\", \"previousBlock\" FROM \"block\" where \"height\" BETWEEN ? and ? order by \"height\"");

			LinkedList<Long> list = new LinkedList<>();
			synchronized (getListStatement) {

				getListStatement.setInt(1, begin);
				getListStatement.setInt(2, end);

				ResultSet set = getListStatement.executeQuery();
				while (set.next()) {
					list.add(set.getLong(1));
				}
				set.close();

			}

			long[] result = new long[list.size()];
			int i = 0;
			for (Long item : list) {
				result[i++] = item;
			}

			return result;

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	/**
	 * Read block history from DB generated by specified account
	 *
	 * @param db            data connection
	 * @param peerAccountID generator id
	 * @param time          time limit for read from history
	 * @return sorted by height list of block id
	 * @throws DataAccessException problems with the DB
	 */
	public static long[] getBlockListByPeerAccount(ConnectionProxy db, long peerAccountID, int time)
			throws DataAccessException {

		try {

			PreparedStatement statement = db.prepareStatement(
					"SELECT \"id\", \"nextBlock\", \"previousBlock\" FROM \"block\" where \"generator\" = ? and \"timestamp\" >= ? order by \"height\" desc");

			LinkedList<Long> list = new LinkedList<>();
			synchronized (statement) {

				statement.setLong(1, peerAccountID);
				statement.setInt(2, time);

				ResultSet set = statement.executeQuery();
				while (set.next()) {
					list.add(set.getLong(1));
				}
				set.close();

			}

			long[] result = new long[list.size()];
			int i = 0;
			for (Long item : list) {
				result[i++] = item;
			}

			return result;

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	/**
	 * Get block position in blockchain
	 *
	 * @param db data connection
	 * @param id block id
	 * @return block height or -1 if block not exist
	 * @throws DataAccessException problems with the DB
	 */
	public static int getHeight(ConnectionProxy db, final long id) {
		try {

			PreparedStatement statement = db.prepareStatement("SELECT \"height\" FROM \"block\" where \"id\" = ?");
			int h = -1;
			synchronized (statement) {

				statement.setLong(1, id);

				ResultSet set = statement.executeQuery();
				while (set.next()) {
					h = set.getInt(1);
				}
				set.close();

			}

			return h;

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	/**
	 * Read transactions for block
	 *
	 * @param db data connection
	 * @param id block id
	 * @return Transaction list
	 * @throws DataAccessException problems with the DB
	 */
	static List<Transaction> getTransactions(ConnectionProxy db, final long id) throws SQLException, EOFException {

		try {

			PreparedStatement getTransactionStatement = db
					.prepareStatement(TransactionHelper.SELECT_TRANSACTIONS_SQL + " where \"block\" = ?");
			synchronized (getTransactionStatement) {
				getTransactionStatement.setLong(1, id);

				List<Transaction> transactions = new ArrayList<>();

				ResultSet tranSet = getTransactionStatement.executeQuery();
				while (tranSet.next()) {
					Transaction transaction = TransactionHelper.getTransactionFromRow(tranSet);
					transactions.add(transaction);
				}
				tranSet.close();

				return transactions;
			}

		} catch (Exception e) {
			throw new DataAccessException(e);
		}

	}

	public static Block getByHeight(ConnectionProxy db, int height) {
		try {

			PreparedStatement getStatement = db.prepareStatement(
					"select \"version\", \"timestamp\", \"previousBlock\", \"generator\", \"generationSignature\", \"blockSignature\", \"height\", \"nextBlock\", \"cumulativeDifficulty\", \"snapshot\" from \"block\" where \"height\" = ?");

			ResultSet set;

			Block block = null;
			synchronized (getStatement) {

				getStatement.setInt(1, height);
				set = getStatement.executeQuery();
				try {
					while (set.next()) {
						if (block != null) {
							throw new DataAccessException("Uncertain state.");
						}
						block = getBlockFromRow(db, set);
					}
				} finally {
					set.close();
				}

			}
			return block;

		} catch (Exception e) {
			throw new DataAccessException(e);
		}
	}

	private static Block getBlockFromRow(ConnectionProxy db, ResultSet set) throws SQLException {

		int version = set.getInt("version");
		int timestamp = set.getInt("timestamp");
		long previousBlock = set.getLong("previousBlock");
		long generator = set.getLong("generator");
		byte[] generationSignature = Format.convert(set.getString("generationSignature"));
		byte[] signature = Format.convert(set.getString("blockSignature"));
		byte[] snapshot = Format.convert(set.getString("snapshot"));

		DbBlock block = new DbBlock(db);
		block.setVersion(version);
		block.setTimestamp(timestamp);
		block.setPreviousBlock(previousBlock);
		block.setGenerationSignature(generationSignature);
		block.setSenderID(generator);
		block.setSignature(signature);
		block.setSnapshot(snapshot);

		block.setHeight(set.getInt("height"));
		block.setNextBlock(set.getLong("nextBlock"));
		block.setCumulativeDifficulty(new BigInteger(set.getString("cumulativeDifficulty")));

		return block;

	}

}
