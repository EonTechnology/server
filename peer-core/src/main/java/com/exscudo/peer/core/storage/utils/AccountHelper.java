package com.exscudo.peer.core.storage.utils;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import com.exscudo.peer.core.TransactionType;
import com.exscudo.peer.core.data.Block;
import com.exscudo.peer.core.data.Transaction;
import com.exscudo.peer.core.data.identifier.AccountID;
import com.exscudo.peer.core.data.identifier.BlockID;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.stmt.ArgumentHolder;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.ThreadLocalSelectArg;
import com.j256.ormlite.stmt.Where;
import com.j256.ormlite.support.ConnectionSource;

public class AccountHelper {

    private Dao<DbBlock, Long> daoBlocks;
    private Dao<DbTransaction, Long> daoTransaction;
    private BlockHelper blockHelper;

    private QueryBuilder<DbTransaction, Long> getBuilder = null;
    private QueryBuilder<DbTransaction, Long> getRegTxBuilder = null;
    private QueryBuilder<DbBlock, Long> getCreatedBlockBuilder = null;

    private ArgumentHolder vRecipient = new ThreadLocalSelectArg();
    private ArgumentHolder vSender = new ThreadLocalSelectArg();

    private ArgumentHolder vBGenerator = new ThreadLocalSelectArg();
    private ArgumentHolder vBTimestamp = new ThreadLocalSelectArg();

    public AccountHelper(ConnectionSource connectionSource) {
        blockHelper = new BlockHelper(connectionSource);
        try {
            daoBlocks = DaoManager.createDao(connectionSource, DbBlock.class);
            daoTransaction = DaoManager.createDao(connectionSource, DbTransaction.class);
        } catch (SQLException ex) {
            throw new RuntimeException(ex);
        }
    }

    /**
     * Find all transactions for account
     *
     * @param accountId account id
     * @return transaction map. Empty if user does not exist or has not sent any
     * transaction.
     * @throws SQLException problems with the DB
     */
    public List<Transaction> getTransactions(AccountID accountId, long from, int limit) throws SQLException {

        if (getBuilder == null) {
            getBuilder = daoTransaction.queryBuilder();
            Where<DbTransaction, Long> w = getBuilder.where();
            w.and(w.eq("tag", 1), w.or(w.eq("recipient_id", vRecipient), w.eq("sender_id", vSender)));
            getBuilder.orderBy("timestamp", false);
        }

        vRecipient.setValue(accountId.getValue());
        vSender.setValue(accountId.getValue());
        getBuilder.offset(from).limit((long) limit);
        return readTransactionSet(getBuilder.query());
    }

    public DbTransaction findRegTransaction(AccountID accountId) throws SQLException {

        if (getRegTxBuilder == null) {
            getRegTxBuilder = daoTransaction.queryBuilder();
            final Where<DbTransaction, Long> w = getRegTxBuilder.where();
            w.eq("tag", 1).and().eq("type", TransactionType.Registration).and().eq("recipient_id", vRecipient);
        }

        vRecipient.setValue(accountId.getValue());

        DbTransaction dbt = getRegTxBuilder.queryForFirst();
        return dbt;
    }

    /**
     * Read all transactions from list
     *
     * @param list
     * @return transaction map
     * @throws SQLException problems with the DB
     */
    private List<Transaction> readTransactionSet(List<DbTransaction> list) throws SQLException {

        List<Transaction> map = new ArrayList<>();
        for (DbTransaction dbt : list) {
            Transaction transaction = dbt.toTransaction();
            map.add(transaction);
        }
        return map;
    }

    /**
     * Read block history from DB generated by specified account
     *
     * @param peerAccountID generator id
     * @param time          time limit for read from history
     * @return sorted by height list of block id
     * @throws SQLException problems with the DB
     */
    public BlockID[] getCreatedBlockList(AccountID peerAccountID, int time) throws SQLException {

        if (getCreatedBlockBuilder == null) {
            getCreatedBlockBuilder = daoBlocks.queryBuilder();
            getCreatedBlockBuilder.selectColumns("id");
            getCreatedBlockBuilder.where().eq("tag", 1);
            getCreatedBlockBuilder.where().and().eq("generator", vBGenerator);
            getCreatedBlockBuilder.where().and().ge("timestamp", vBTimestamp);
            getCreatedBlockBuilder.orderBy("height", false);
        }

        vBGenerator.setValue(peerAccountID.getValue());
        vBTimestamp.setValue(time);

        List<DbBlock> query = getCreatedBlockBuilder.query();
        List<BlockID> res = new LinkedList<>();

        for (DbBlock block : query) {
            res.add(new BlockID(block.getId()));
        }

        return res.toArray(new BlockID[0]);
    }

    /**
     * @param blockID
     * @return
     * @throws SQLException
     */
    public Block getBlockHeader(BlockID blockID) throws SQLException {

        DbBlock dbBlock = blockHelper.getBlock(blockID.getValue());
        if (dbBlock != null) {
            return dbBlock.toBlock(blockHelper);
        }
        return null;
    }
}
